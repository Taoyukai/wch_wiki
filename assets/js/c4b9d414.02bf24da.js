"use strict";(self.webpackChunkwch_wiki=self.webpackChunkwch_wiki||[]).push([[6360],{3905:(n,e,t)=>{t.d(e,{Zo:()=>P,kt:()=>d});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=r.createContext({}),_=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},P=function(n){var e=_(n.components);return r.createElement(p.Provider,{value:e},n.children)},I={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},o=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,p=n.parentName,P=u(n,["components","mdxType","originalType","parentName"]),o=_(t),d=i,c=o["".concat(p,".").concat(d)]||o[d]||I[d]||a;return t?r.createElement(c,l(l({ref:e},P),{},{components:t})):r.createElement(c,l({ref:e},P))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,l=new Array(a);l[0]=o;var u={};for(var p in e)hasOwnProperty.call(e,p)&&(u[p]=e[p]);u.originalType=n,u.mdxType="string"==typeof n?n:i,l[1]=u;for(var _=2;_<a;_++)l[_]=t[_];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}o.displayName="MDXCreateElement"},4627:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>I,frontMatter:()=>a,metadata:()=>u,toc:()=>_});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:5,description:"\u5f85\u673a\u6a21\u5f0f\u914d\u7f6e\u53ca\u5524\u9192\u64cd\u4f5c"},l="\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f",u={unversionedId:"MCU+/CH32V307/Reference Manual/\u7535\u6e90\u63a7\u5236/\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f",id:"MCU+/CH32V307/Reference Manual/\u7535\u6e90\u63a7\u5236/\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f",title:"\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f",description:"\u5f85\u673a\u6a21\u5f0f\u914d\u7f6e\u53ca\u5524\u9192\u64cd\u4f5c",source:"@site/docs/MCU+/CH32V307/Reference Manual/02_\u7535\u6e90\u63a7\u5236/05_\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f.md",sourceDirName:"MCU+/CH32V307/Reference Manual/02_\u7535\u6e90\u63a7\u5236",slug:"/MCU+/CH32V307/Reference Manual/\u7535\u6e90\u63a7\u5236/\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f",permalink:"/docs/MCU+/CH32V307/Reference Manual/\u7535\u6e90\u63a7\u5236/\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"\u5f85\u673a\u6a21\u5f0f\u914d\u7f6e\u53ca\u5524\u9192\u64cd\u4f5c"},sidebar:"MCU",previous:{title:"\u4f4e\u529f\u8017\u4e4b\u505c\u6b62\u6a21\u5f0f",permalink:"/docs/MCU+/CH32V307/Reference Manual/\u7535\u6e90\u63a7\u5236/\u4f4e\u529f\u8017\u4e4b\u505c\u6b62\u6a21\u5f0f"},next:{title:"RTC\u81ea\u52a8\u5524\u9192",permalink:"/docs/MCU+/CH32V307/Reference Manual/\u7535\u6e90\u63a7\u5236/RTC\u81ea\u52a8\u5524\u9192"}},p={},_=[{value:"1. \u5f85\u673a\u6a21\u5f0f\u7b80\u4ecb",id:"1-\u5f85\u673a\u6a21\u5f0f\u7b80\u4ecb",level:2},{value:"2.\u8fdb\u5165\u5f85\u673a\u6a21\u5f0f",id:"2\u8fdb\u5165\u5f85\u673a\u6a21\u5f0f",level:2},{value:"3. \u9000\u51fa\u5f85\u673a\u6a21\u5f0f",id:"3-\u9000\u51fa\u5f85\u673a\u6a21\u5f0f",level:2},{value:"4. \u53c2\u8003\u4ee3\u7801",id:"4-\u53c2\u8003\u4ee3\u7801",level:2}],P={toc:_};function I(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},P,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f"},"\u4f4e\u529f\u8017\u4e4b\u5f85\u673a\u6a21\u5f0f"),(0,i.kt)("h2",{id:"1-\u5f85\u673a\u6a21\u5f0f\u7b80\u4ecb"},"1. \u5f85\u673a\u6a21\u5f0f\u7b80\u4ecb"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5f85\u673a\u6a21\u5f0f"),"\uff08Standby\uff09\uff0c\u82af\u7247\u7684\u8fd0\u884c\u529f\u8017",(0,i.kt)("strong",{parentName:"p"},"\u6700\u4f4e"),"\u3002"),(0,i.kt)("p",null,"\u8be5\u6a21\u5f0f\u4e0b\uff0c\u5185\u6838\u5904\u4e8e\u6df1\u7761\u7720\u6a21\u5f0f\uff08Sleep Deep\uff09, \u7535\u538b\u8c03\u8282\u5668\u8fdb\u5165\u505c\u673a\u6a21\u5f0f\u3002"),(0,i.kt)("p",null,"\u5f85\u673a\u6a21\u5f0f\u5524\u9192\u540e\uff0cMCU\u5c06\u6267\u884c",(0,i.kt)("strong",{parentName:"p"},"\u7535\u6e90\u590d\u4f4d"),"\u3002"),(0,i.kt)("p",null,"\u8be5\u6a21\u5f0f\u4e0b\u7684\u5524\u9192\u65f6\u95f4\u7ea6 ",(0,i.kt)("strong",{parentName:"p"},"8.9ms")," \uff08LDO\u7a33\u5b9a\u65f6\u95f4 + HSI RC\u65f6\u949f\u5524\u9192 + \u4ee3\u7801\u52a0\u8f7d\u65f6\u95f4\uff09\u3002"),(0,i.kt)("p",null,"\u6b64\u6a21\u5f0f\u4e0b\u7684\u7761\u7720\u7535\u6d41\u7ea6\u4e3a",(0,i.kt)("strong",{parentName:"p"},"1~2uA"),"\u3002"),(0,i.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"PWR_CTLR")),"\u5bc4\u5b58\u5668\u63a7\u5236\u8be5\u6a21\u5f0f\u4e0b\u90e8\u5206SRAM\u4e0d\u6389\u7535\uff0c\u4f7f\u7528\u53d8\u91cf\u6570\u636e\u4fdd\u6301\uff0c\u7761\u7720\u7535\u6d41\u589e\u52a0\u7ea6 ",(0,i.kt)("strong",{parentName:"p"},"1.5~2uA")," \u914d\u7f6e\u65b9\u5f0f\u5982\u4e0b\uff1a"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"\u4f4d"),(0,i.kt)("th",{parentName:"tr",align:null},"\u63a7\u5236\u4f4d\u540d\u79f0"),(0,i.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,i.kt)("th",{parentName:"tr",align:null},"\u590d\u4f4d\u503c"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"19"),(0,i.kt)("td",{parentName:"tr",align:null},"R30K_VBATEN"),(0,i.kt)("td",{parentName:"tr",align:null},"VBAT\u4f9b\u7535\u65f6\uff0cStandby\u6a21\u5f0f\u4e0b\u524d 30K RAM\u662f\u5426\u5e26\u7535\uff1a",(0,i.kt)("br",null)," 1\uff1a\u5e26\u7535",(0,i.kt)("br",null)," 0\uff1a\u4e0d\u5e26\u7535"),(0,i.kt)("td",{parentName:"tr",align:null},"0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"18"),(0,i.kt)("td",{parentName:"tr",align:null},"R2K_VBATE"),(0,i.kt)("td",{parentName:"tr",align:null},"VBAT\u4f9b\u7535\u65f6\uff0cStandby\u6a21\u5f0f\u4e0b\u524d 30K RAM\u662f\u5426\u5e26\u7535\uff1a",(0,i.kt)("br",null)," 1\uff1a\u5e26\u7535",(0,i.kt)("br",null)," 0\uff1a\u4e0d\u5e26\u7535"),(0,i.kt)("td",{parentName:"tr",align:null},"0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"17"),(0,i.kt)("td",{parentName:"tr",align:null},"R30K_STYEN"),(0,i.kt)("td",{parentName:"tr",align:null},"Standby\u6a21\u5f0f\u4e0b\u524d 30K RAM\u662f\u5426\u5e26\u7535\uff1a",(0,i.kt)("br",null)," 1\uff1a\u5e26\u7535",(0,i.kt)("br",null)," 0\uff1a\u4e0d\u5e26\u7535"),(0,i.kt)("td",{parentName:"tr",align:null},"0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16"),(0,i.kt)("td",{parentName:"tr",align:null},"R2K_STYEN"),(0,i.kt)("td",{parentName:"tr",align:null},"Standby\u6a21\u5f0f\u4e0b\u524d 2K RAM\u662f\u5426\u5e26\u7535\uff1a",(0,i.kt)("br",null)," 1\uff1a\u5e26\u7535",(0,i.kt)("br",null)," 0\uff1a\u4e0d\u5e26\u7535"),(0,i.kt)("td",{parentName:"tr",align:null},"0")))),(0,i.kt)("h2",{id:"2\u8fdb\u5165\u5f85\u673a\u6a21\u5f0f"},"2.\u8fdb\u5165\u5f85\u673a\u6a21\u5f0f"),(0,i.kt)("p",null,"\u8fdb\u5165\u5f85\u673a\u6a21\u5f0f\u6b65\u9aa4\u5982\u4e0b\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u914d\u7f6e PFIC_SCTLR \u7cfb\u7edf\u63a7\u5236\u5bc4\u5b58\u5668\u63a7\u5236\u4f4d ",(0,i.kt)("inlineCode",{parentName:"li"},"SLEEPDEEP = 1")),(0,i.kt)("li",{parentName:"ul"},"\u914d\u7f6e PWR_CTLR \u7535\u6e90\u63a7\u5236\u5bc4\u5b58\u5668\u63a7\u5236\u4f4d ",(0,i.kt)("inlineCode",{parentName:"li"},"PDDS = 1")),(0,i.kt)("li",{parentName:"ul"},"\u6e05\u9664\u7535\u6e90\u63a7\u5236/\u72b6\u6001\u5bc4\u5b58\u5668 ",(0,i.kt)("inlineCode",{parentName:"li"},"PWR_SCR")," \u4e2d\u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"WUF")," \u4f4d\uff0c",(0,i.kt)("inlineCode",{parentName:"li"},"PWR_CTLR")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"CWUF")," \u4f4d\u51991\u6e05\u96f6"),(0,i.kt)("li",{parentName:"ul"},"\u6267\u884c ",(0,i.kt)("inlineCode",{parentName:"li"},"WFI")," \u6216 ",(0,i.kt)("inlineCode",{parentName:"li"},"WFE"),"\u6307\u4ee4")),(0,i.kt)("h2",{id:"3-\u9000\u51fa\u5f85\u673a\u6a21\u5f0f"},"3. \u9000\u51fa\u5f85\u673a\u6a21\u5f0f"),(0,i.kt)("p",null,"\u9000\u51fa\u5f85\u673a\u6a21\u5f0f\u6b65\u9aa4\u5982\u4e0b\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"WKUP\u5f15\u811a\u4e0a\u5347\u6cbf"),(0,i.kt)("li",{parentName:"ul"},"RTC\u95f9\u949f\u4e8b\u4ef6\u7684\u4e0a\u5347\u6cbf"),(0,i.kt)("li",{parentName:"ul"},"NRST\u5f15\u811a\u4e0a\u7684\u5916\u90e8\u590d\u4f4d"),(0,i.kt)("li",{parentName:"ul"},"IWDG\u590d\u4f4d"),(0,i.kt)("li",{parentName:"ul"},"\u5524\u9192\u4e8b\u4ef6\uff0c\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8EXTI\u7ebf\u4e3a\u4e8b\u4ef6\u6a21\u5f0f\uff0c\u5f53CPU\u4eceWFE\u5524\u9192\u540e\uff0c\u56e0\u4e3a\u5bf9\u5e94\u4e8b\u4ef6\u7ebf\u7684\u6302\u8d77\u4f4d\u6ca1\u6709\u88ab\u7f6e\u4f4d\uff0c",(0,i.kt)("strong",{parentName:"li"},"\u4e0d\u5fc5\u6e05\u9664"),"\u76f8\u5e94\u5916\u8bbe\u7684\u4e2d\u65ad\u6302\u8d77\u4f4d\u6216PFIC\u4e2d\u65ad\u901a\u9053\u6302\u8d77\u4f4d\u3002")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"WKUP\u5f15\u811a\u4e0a\u5347\u6cbf\u5524\u9192\u548cRTC\u95f9\u949f\u5524\u9192\u4e8b\u4ef6\u4f1a\u7f6e\u7535\u6e90\u63a7\u5236/\u72b6\u6001\u5bc4\u5b58\u5668 ",(0,i.kt)("inlineCode",{parentName:"li"},"PWR_SCR")," \u4e2d\u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"WUF")," \u4f4d\uff0c\u6b64\u5bc4\u5b58\u5668\u4ece\u5f85\u673a\u6a21\u5f0f\u5524\u9192\u540e\u4fdd\u6301\u4e0d\u53d8\uff0c\u901a\u8fc7",(0,i.kt)("inlineCode",{parentName:"li"},"PWR_CTLR")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"CWUF")," \u4f4d\u51991 \u6e05\u9664",(0,i.kt)("inlineCode",{parentName:"li"},"WUF"),"\u6807\u5fd7\u3002"))),(0,i.kt)("h2",{id:"4-\u53c2\u8003\u4ee3\u7801"},"4. \u53c2\u8003\u4ee3\u7801"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("code",null,"\u53c2\u8003\u4ee3\u7801 - \u5916\u90e8\u4e8b\u4ef6\u5524\u9192\u548cWKUP\u5f15\u811a\u5524\u9192\uff0cSRAM\u4e0d\u4fdd\u6301")," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "debug.h"\n\nvoid wakeup_init(void)\n{\n    GPIO_InitTypeDef GPIO_InitStructure = {0};\n    EXTI_InitTypeDef EXTI_InitStructure = {0};\n\n    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA |RCC_APB2Periph_AFIO , ENABLE);\n\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    GPIO_Init(GPIOA, &GPIO_InitStructure);\n\n    /* GPIOA.3 ----\x3e EXTI_Line3 */\n    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);\n    EXTI_InitStructure.EXTI_Line = EXTI_Line3;\n\n    /* WFI - EXTI_Mode_Interrupt, WFE - EXTI_Mode_Event*/\n    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Event; \n\n    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;\n    EXTI_InitStructure.EXTI_LineCmd = ENABLE;\n    EXTI_Init(&EXTI_InitStructure);\n\n}\n\nint main(void)\n{\n\n    /* Configure unused GPIO as IPD to reduce power consumption */\n    GPIO_InitTypeDef GPIO_InitStructure = {0};   \n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|\n             RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOE, ENABLE);\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;\n\n    GPIO_Init(GPIOA, &GPIO_InitStructure);\n    GPIO_Init(GPIOB, &GPIO_InitStructure);\n    GPIO_Init(GPIOC, &GPIO_InitStructure);\n    GPIO_Init(GPIOD, &GPIO_InitStructure);\n    GPIO_Init(GPIOE, &GPIO_InitStructure);\n    /***************************************/\n\n\n    Delay_Init();\n    USART_Printf_Init(256000);\n\n    printf("ch32v307 standby test\\r\\n");\n    Delay_Ms(2000);\n\n    /* wakeup event, PA3 EXTI trigger falling */\n    wakeup_init(); \n\n    /* set PWR register, need enable rcc of pwr */\n    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); \n\n    /* WKUP or RTC wakeup event flag, clear by set PWR_CTLR CWUF */\n    printf("PWR_CSR WUF = %ld \\r\\n",PWR->CSR & 0x1); \n    if(PWR->CSR & 0x1)\n    {\n        PWR->CTLR |= (1<<2); /* clear wakeup flag */\n    }\n\n    /* enable WKUP, PA0 */\n    PWR_WakeUpPinCmd(ENABLE);\n\n    /* standby mode, mcu will reset after wakeup event */\n    PWR_EnterSTANDBYMode();\n\n    printf("wakeup\\r\\n");\n\n    while(1)\n    {\n        printf("run in main loop\\r\\n");\n        Delay_Ms(1000);\n    }\n}\n'))),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("code",null,"\u53c2\u8003\u4ee3\u7801 - SRAM\u4fdd\u6301\uff0cWKUP \u4e0a\u5347\u6cbf\u5524\u9192")," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "debug.h"\n\n\nvoid ram_write_test(void)\n{\n    uint32_t myAddr=0x20000000+10*1024;\n    uint32_t myAddr2=0x20000000+1*1024+512;\n    uint32_t i=0;\n    for(i=0;i<10;i++)//Write 30K RAM\n    {\n        *(uint32_t volatile *)(myAddr+(i<<2)) = 0x12345678;\n    }\n    for(i=0;i<10;i++)//Check 30K RAM\n    {\n        if((*(uint32_t volatile *)(myAddr+(i<<2))) != 0x12345678)\n        {\n            printf("Write 30K RAM Error!\\r\\n");\n            break;\n        }\n    }\n    printf("Write 30K RAM Successfully!\\r\\n");\n    for(i=0;i<10;i++)//Write 2K RAM\n    {\n        *(uint32_t volatile *)(myAddr2+(i<<2)) = 0x12345678;\n    }\n    for(i=0;i<10;i++)//Check 2K RAM\n    {\n        if((*(uint32_t volatile *)(myAddr2+(i<<2))) != 0x12345678)\n        {\n            printf("Write 2K RAM Error!\\r\\n");\n            break;\n        }\n    }\n    printf("Write 2K RAM Successfully!\\r\\n");\n\n}\n\n\nvoid ram_read_test(void)\n{\n    uint32_t myAddr=0x20000000+10*1024;\n    uint32_t myAddr2=0x20000000+1*1024+512;\n    uint32_t i=0;\n    printf("2K RAM:\\r\\n");\n    for(i=0;i<10;i++)\n    {\n        printf("0x%08lx=0x%08lx\\r\\n",myAddr2+(i<<2),*(uint32_t volatile *)(myAddr2+(i<<2)));\n    }\n    printf("32K RAM:\\r\\n");\n    for(i=0;i<10;i++)\n    {\n        printf("0x%08lx=0x%08lx\\r\\n",myAddr+(i<<2),*(uint32_t volatile *)(myAddr+(i<<2)));\n    }\n\n}\n\n\nvoid wakeup_init(void)\n{\n    GPIO_InitTypeDef GPIO_InitStructure = {0};\n    EXTI_InitTypeDef EXTI_InitStructure = {0};\n\n    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA |RCC_APB2Periph_AFIO , ENABLE);\n\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    GPIO_Init(GPIOA, &GPIO_InitStructure);\n\n    /* GPIOA.3 ----\x3e EXTI_Line3 */\n    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);\n    EXTI_InitStructure.EXTI_Line = EXTI_Line3;\n\n    /* WFI - EXTI_Mode_Interrupt, WFE - EXTI_Mode_Event*/\n    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Event; \n\n    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;\n    EXTI_InitStructure.EXTI_LineCmd = ENABLE;\n    EXTI_Init(&EXTI_InitStructure);\n\n}\n\nint main(void)\n{\n\n    /* Configure unused GPIO as IPD to reduce power consumption */\n    GPIO_InitTypeDef GPIO_InitStructure = {0};   \n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|\n             RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOE, ENABLE);\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;\n\n    GPIO_Init(GPIOA, &GPIO_InitStructure);\n    GPIO_Init(GPIOB, &GPIO_InitStructure);\n    GPIO_Init(GPIOC, &GPIO_InitStructure);\n    GPIO_Init(GPIOD, &GPIO_InitStructure);\n    GPIO_Init(GPIOE, &GPIO_InitStructure);\n    /***************************************/\n\n\n    Delay_Init();\n    USART_Printf_Init(256000);\n\n    printf("ch32v307 standby test\\r\\n");\n    Delay_Ms(2000);\n\n    /* wakeup event, PA3 EXTI trigger falling */\n    wakeup_init(); \n\n    ram_read_test();\n    ram_write_test();\n\n    /* set PWR register, need enable rcc of pwr */\n    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); \n\n    /* WKUP or RTC wakeup event flag, clear by set PWR_CTLR CWUF */\n    printf("PWR_CSR WUF = %ld \\r\\n",PWR->CSR & PWR_FLAG_WU); \n    if(PWR->CSR & PWR_FLAG_WU)\n    {\n        PWR->CTLR |= (1<<2); /* clear wakeup flag */\n    }\n\n    /* enable WKUP, PA0 */\n    PWR_WakeUpPinCmd(ENABLE);\n\n    /* standby mode, mcu will reset after wakeup event */\n    PWR_EnterSTANDBYMode_RAM_LV();\n    // PWR_EnterSTANDBYMode_RAM();\n\n    printf("wakeup\\r\\n");\n\n    while(1)\n    {\n        printf("run in main loop\\r\\n");\n        Delay_Ms(1000);\n    }\n}\n'))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u5f53MCU\u5904\u4e8e\u505c\u6b62\u6a21\u5f0f\u6216\u5f85\u673a\u6a21\u5f0f\u65f6\uff0c\u4e24\u7ebf\u8c03\u8bd5\u4eff\u771f\u63a5\u53e3\u662f\u5904\u4e8e\u5173\u95ed\u72b6\u6001\uff0c\u6b64\u65f6\u662f\u65e0\u6cd5\u7528 WCH-Link \u8fdb\u884c\u7a0b\u5e8f\u7684\u4e0b\u8f7d\u3002\u82e5\u5524\u9192\u914d\u7f6e\u4e0d\u6b63\u786e\uff0cMCU\u65e0\u6cd5\u5524\u9192\uff0c\u6b64\u65f6\u5c31\u4f1a\u548cMCU\u5931\u8054\u3002\u89e3\u51b3\u65b9\u5f0f\u5982\u4e0b\uff1a"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"\u5728\u4e3b\u51fd\u6570\u542f\u52a8\u65f6\u52a0\u4e00\u4e2a\u8f83\u957f\u7684\u5ef6\u65f6\u51fd\u6570\uff0c\u6309\u4f4f\u677f\u5b50\u7684\u590d\u4f4d\u952e\uff0c\u4f7f\u7cfb\u7edf\u5904\u4e8e\u590d\u4f4d\u72b6\u6001\uff0c\u7136\u540e\u70b9\u51fb IDE \u4e0b\u8f7d\u6309\u94ae\uff0c\u8fd9\u65f6\u518d\u91ca\u653e\u590d\u4f4d\u952e\uff0c\u8fd9\u6837MCU\u4e0a\u7535\u540e\u6267\u884c\u5ef6\u65f6\u51fd\u6570\u671f\u95f4\u5bf9\u4f4e\u529f\u8017\u7a0b\u5e8f\u8fdb\u884c\u64e6\u9664\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u9009\u62e9\u542f\u52a8\u65b9\u5f0f\uff0c\u901a\u8fc7\u5c06BOOT0\u62c9\u9ad8\uff0c\u91cd\u65b0\u4e0a\u7535\u4f7fMCU\u4eceSRAM\u542f\u52a8\uff0c\u91cd\u65b0\u9009\u62e9\u4e00\u4e2a\u975e\u7761\u7720\u7a0b\u5e8f\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u5b8c\u6210\u540e\u5c06BOOT0\u62c9\u4f4e\uff0c\u7136\u540e\u91cd\u65b0\u4e0a\u7535\u5373\u53ef\u91cd\u65b0\u4e0b\u8f7d\u7a0b\u5e8f\u3002"))))}I.isMDXComponent=!0}}]);