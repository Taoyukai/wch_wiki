"use strict";(self.webpackChunkwch_wiki=self.webpackChunkwch_wiki||[]).push([[5904],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var o=r.createContext({}),f=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=f(n.components);return r.createElement(o.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,o=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),u=f(t),d=i,b=u["".concat(o,".").concat(d)]||u[d]||c[d]||a;return t?r.createElement(b,s(s({ref:e},p),{},{components:t})):r.createElement(b,s({ref:e},p))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,s=new Array(a);s[0]=u;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=n,l.mdxType="string"==typeof n?n:i,s[1]=l;for(var f=2;f<a;f++)s[f]=t[f];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1289:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>f});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:1,description:"\u91c7\u7528CH32V003\u505a\u4e3b\u63a7\uff0c\u9ea6\u514b\u98ce+CH32V003\u5185\u7f6e\u8fd0\u653e+ADC\u91c7\u96c6\u97f3\u4e50\uff0c\u505a128\u70b9fft\uff0c\u9a71\u52a864\u9897ws2812\u7ec4\u6210\u76848*8\u9635\u5217\uff0c\u5b8c\u6210\u4f4e\u6210\u672c\u97f3\u4e50\u9891\u8c31\u663e\u793a\u3002"},s="CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a",l={unversionedId:"OpenSourceProjects/demo_app/CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a",id:"OpenSourceProjects/demo_app/CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a",title:"CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a",description:"\u91c7\u7528CH32V003\u505a\u4e3b\u63a7\uff0c\u9ea6\u514b\u98ce+CH32V003\u5185\u7f6e\u8fd0\u653e+ADC\u91c7\u96c6\u97f3\u4e50\uff0c\u505a128\u70b9fft\uff0c\u9a71\u52a864\u9897ws2812\u7ec4\u6210\u76848*8\u9635\u5217\uff0c\u5b8c\u6210\u4f4e\u6210\u672c\u97f3\u4e50\u9891\u8c31\u663e\u793a\u3002",source:"@site/docs/OpenSourceProjects/demo_app/01_CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a.md",sourceDirName:"OpenSourceProjects/demo_app",slug:"/OpenSourceProjects/demo_app/CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a",permalink:"/docs/OpenSourceProjects/demo_app/CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"\u91c7\u7528CH32V003\u505a\u4e3b\u63a7\uff0c\u9ea6\u514b\u98ce+CH32V003\u5185\u7f6e\u8fd0\u653e+ADC\u91c7\u96c6\u97f3\u4e50\uff0c\u505a128\u70b9fft\uff0c\u9a71\u52a864\u9897ws2812\u7ec4\u6210\u76848*8\u9635\u5217\uff0c\u5b8c\u6210\u4f4e\u6210\u672c\u97f3\u4e50\u9891\u8c31\u663e\u793a\u3002"},sidebar:"OpenSourceProjects",previous:{title:"Demo_App",permalink:"/docs/category/demo_app"}},o={},f=[{value:"1. \u786c\u4ef6\u8bbe\u8ba1",id:"1-\u786c\u4ef6\u8bbe\u8ba1",level:2},{value:"2. SPI \u9a71\u52a8 ws2812",id:"2-spi-\u9a71\u52a8-ws2812",level:2},{value:"2.1 ws2812 \u7b80\u4ecb",id:"21-ws2812-\u7b80\u4ecb",level:3},{value:"2.2 SPI+DMA\u6a21\u62dfws2812\u65f6\u5e8f",id:"22-spidma\u6a21\u62dfws2812\u65f6\u5e8f",level:3},{value:"2.3 \u5c06 HSV \u8f6c\u5316\u4e3a RGB",id:"23-\u5c06-hsv-\u8f6c\u5316\u4e3a-rgb",level:3},{value:"3. \u9ea6\u514b\u98ce\u91c7\u96c6\u97f3\u9891",id:"3-\u9ea6\u514b\u98ce\u91c7\u96c6\u97f3\u9891",level:2},{value:"3.1 OPA+ADC+DMA \u91c7\u96c6\u97f3\u9891",id:"31-opaadcdma-\u91c7\u96c6\u97f3\u9891",level:3},{value:"3.2 FFT \u5206\u6790\u9891\u8c31",id:"32-fft-\u5206\u6790\u9891\u8c31",level:3},{value:"4. \u6548\u679c\u6f14\u793a",id:"4-\u6548\u679c\u6f14\u793a",level:2}],p={toc:f};function c(n){let{components:e,...a}=n;return(0,i.kt)("wrapper",(0,r.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ch32v003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a"},"CH32V003\u5236\u4f5c\u97f3\u4e50\u9891\u8c31\u663e\u793a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"CH32V003_resource",src:t(163).Z,width:"918",height:"366"})),(0,i.kt)("p",null,"CH32V003\uff0c\u81ea\u5e26\u8fd0\u653e\u3001SPI\u3001PWM\u7b49\u5916\u8bbe\u6a21\u5757\uff0c\u5173\u952e\u8fd8",(0,i.kt)("strong",{parentName:"p"},"\u4fbf\u5b9c\uff0c\u4fbf\u5b9c\uff0c\u4fbf\u5b9c\uff01")," \u521a\u597d\u7528\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u4f4e\u6210\u672c\u7684\u97f3\u4e50\u8c31\u663e\u793a\u3002"),(0,i.kt)("h2",{id:"1-\u786c\u4ef6\u8bbe\u8ba1"},"1. \u786c\u4ef6\u8bbe\u8ba1"),(0,i.kt)("p",null,"\u663e\u793a\u65b9\u9762\uff0c\u4f7f\u752864\u9897ws2812\u7ec4\u62108*8\u7684\u663e\u793a\u9635\u5217\uff0c\u901a\u8fc7 CH32V003 \u7684SPI\u6a21\u62dfws2812\u7684\u65f6\u5e8f\u8fdb\u884c\u9a71\u52a8\u3002"),(0,i.kt)("p",null,"\u97f3\u9891\u91c7\u96c6\uff0c\u4f7f\u7528CH32V003\u5185\u90e8\u8fd0\u653e+\u9ea6\u514b\u98ce\u5373\u53ef\u3002"),(0,i.kt)("p",null,"\u6574\u4f53\u786c\u4ef6\u539f\u7406\u56fe\u5982\u4e0b\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ch32v003_ws2812",src:t(6030).Z,width:"1123",height:"794"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ch32v003_ws2812_pcb",src:t(8401).Z,width:"838",height:"727"})),(0,i.kt)("h2",{id:"2-spi-\u9a71\u52a8-ws2812"},"2. SPI \u9a71\u52a8 ws2812"),(0,i.kt)("h3",{id:"21-ws2812-\u7b80\u4ecb"},"2.1 ws2812 \u7b80\u4ecb"),(0,i.kt)("p",null,"ws2812 \u5c06\u63a7\u5236\u7535\u8def\u548cRGB\u706f\u96c6\u6210\u5728\u4e00\u4e2a\u5c01\u88c5\u4e2d\uff0c\u901a\u8fc7\u7ea7\u8054\uff0cMCU\u4f7f\u7528 ",(0,i.kt)("strong",{parentName:"p"},"800Kbps")," \u5355\u7ebf\u901a\u8baf\u5373\u53ef\u5b8c\u6210 30fps \u4e0b",(0,i.kt)("strong",{parentName:"p"},"1024"),"\u4e2aws2812\u706f\u7684\u63a7\u5236\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u901a\u8baf\u534f\u8bae\u5982\u4e0b\uff1a")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ws2812_data_transfer_time",src:t(1351).Z,width:"766",height:"227"})),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("img",{alt:"ws2812_sequence_chart",src:t(1093).Z,width:"421",height:"310"})),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("img",{alt:"ws2812_cascade_method",src:t(9348).Z,width:"419",height:"170"}))))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ws2812_data_transmission_method",src:t(8820).Z,width:"1036",height:"410"})),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u4e0d\u540c\u5382\u5bb6\u751f\u4ea7\u7684 ws2812 \u65f6\u5e8f\u53ef\u80fd\u6709\u533a\u522b\uff0c\u4e0d\u8fc7\u4e00\u822c\u5728\u8bef\u5dee\u8303\u56f4\u5185\u90fd\u53ef\u4ee5\u8bc6\u522b\u3002")),(0,i.kt)("h3",{id:"22-spidma\u6a21\u62dfws2812\u65f6\u5e8f"},"2.2 SPI+DMA\u6a21\u62dfws2812\u65f6\u5e8f"),(0,i.kt)("p",null,"\u901a\u8fc7\u4e0a\u4e00\u8282\u5bf9 ws2812 \u65f6\u5e8f\u7684\u4ecb\u7ecd\uff0c\u5b8c\u6210\u4e00\u4e2a ws2812 \u63a7\u5236\u9700\u8981\u53d1\u9001 24bit GRB \u7684\u989c\u8272\u6570\u636e\uff0c\u6bd4\u7279\u7387\u4e3a 800Kbps\u3002"),(0,i.kt)("p",null,"\u4e3a\u4e86\u53ef\u4ee5\u4f7f\u7528 SPI \u6a21\u62df ws2812 \u7684\u65f6\u5e8f\uff0c\u9700\u8981\u5c06 GRB \u989c\u8272\u6570\u636e\u4e2d\u6bcf 1 \u4e2a bit \u81a8\u80c0\u4e3a 4 \u4e2a bit\uff0c\u5373\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 \u8868\u793a\u4e3a\uff1a1110"),(0,i.kt)("li",{parentName:"ul"},"0 \u8868\u793a\u4e3a\uff1a1000")),(0,i.kt)("p",null,"\u8fd9\u6837 0 bit \u4e2d\u9ad8\u7535\u5e73\u7ea6\u5360 1/4\uff0c\u4f4e\u7535\u5e73\u7ea6\u5360 3/4\u30021 bit \u4e2d\u9ad8\u7535\u5e73\u7ea6\u5360 3/4\uff0c\u4f4e\u7535\u5e73\u7ea6\u5360 1/4\u3002\u7b26\u5408\u901a\u8baf\u534f\u8bae\u3002"),(0,i.kt)("p",null,"\u6b64\u65f6\uff0c\u9a71\u52a8\u4e00\u4e2a ws2812\uff0cSPI MOSI \u5f15\u811a\u9700\u8981\u53d1\u9001 4 x 24 bits = ",(0,i.kt)("strong",{parentName:"p"},"12 Bytes"),"\u3002SPI \u7684\u65f6\u949f\u9891\u7387\u8bbe\u7f6e\u4e3a 800 x 4 = ",(0,i.kt)("strong",{parentName:"p"},"3.2MHz")," \u5de6\u53f3\u3002"),(0,i.kt)("p",null,"CH32V003 \u4e3b\u9891\u8bbe\u7f6e\u4e3a 48MHz\uff0c SPI \u8bbe\u7f6e 16 \u5206\u9891\uff0c\u4e3a 3MHz\uff0c\u5728\u8bef\u5dee\u8303\u56f4\u5185\uff0c\u5b9e\u6d4b\u53ef\u4ee5\u6b63\u5e38\u9a71\u52a8WS2812\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/**\n * @brief \n * \n * @param ws2812_bit_buffer \n * @param ws2812_byte_buffer \n * \n *  1bit \u81a8\u80c0\u4f4d 4bit\n *  1\uff1a1110\n *  0\uff1a1000\n */\nvoid ws2812_set_grb(ws2812_bit_buffer_t *ws2812_bit_buffer, ws2812_byte_buffer_t *ws2812_byte_buffer)\n{\n    ws2812_byte_buffer_t ws2812_color_data = \n    {\n        .green = ws2812_byte_buffer->green,\n        .red   = ws2812_byte_buffer->red,\n        .blue  = ws2812_byte_buffer->blue\n    };\n\n    for(uint8_t i = 0; i<4; i++)\n    {\n        ws2812_bit_buffer->green >>= 8;\n        ws2812_bit_buffer->red   >>= 8;\n        ws2812_bit_buffer->blue  >>= 8;\n        /**\n         * @brief \n         * \u6bcf 2 bit \u7684 RGB \u6570\u636e\u81a8\u80c0\u4e3a 1byte \u7684 spi \u6570\u636e \n         * \u6bcf\u4e2a byte \u4e2d\uff0c\u7b2c 8bit \u548c\u7b2c 3bit \u4f4d\u56fa\u5b9a\u4e3a 1\uff0c\u7b2c 4bit \u548c\u7b2c 0bit \u4f4d\u56fa\u5b9a\u4e3a 0\uff0c\u5269\u4f59 bit \u6839\u636e\u989c\u8272\u503c\u8bbe\u5b9a\n         */\n        ws2812_bit_buffer->green |= ( 0x88 | ((ws2812_color_data.green & 0x80)>>1) | ((ws2812_color_data.green & 0x80)>>2)| \\\n                                             ((ws2812_color_data.green & 0x40)>>4) | ((ws2812_color_data.green & 0x40)>>5) )<<24;\n        ws2812_bit_buffer->red   |= ( 0x88 | ((ws2812_color_data.red & 0x80)>>1)   | ((ws2812_color_data.red & 0x80)>>2)| \\\n                                             ((ws2812_color_data.red & 0x40)>>4)   | ((ws2812_color_data.red & 0x40)>>5) )<<24;\n        ws2812_bit_buffer->blue  |= ( 0x88 | ((ws2812_color_data.blue & 0x80)>>1)  | ((ws2812_color_data.blue & 0x80)>>2)| \\\n                                             ((ws2812_color_data.blue & 0x40)>>4)  | ((ws2812_color_data.blue & 0x40)>>5) )<<24;\n\n        ws2812_color_data.green <<= 2;\n        ws2812_color_data.red   <<= 2;\n        ws2812_color_data.blue  <<= 2;                              \n    } \n}\n")),(0,i.kt)("p",null,"MOSI \u8f93\u51fa\u65f6\u5e8f\u5982\u4e0b\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ws2812_spi_clk",src:t(6739).Z,width:"1310",height:"290"})),(0,i.kt)("p",null,"\u65f6\u5e8f\u6a21\u62df\u6b63\u786e\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u9700\u8981\u663e\u793a\u7684\u989c\u8272\u6570\u636e\u51c6\u5907\u597d\uff0c\u901a\u8fc7DMA+SPI\u63a8\u51fa\u53bb\u5373\u53ef\u3002"),(0,i.kt)("h3",{id:"23-\u5c06-hsv-\u8f6c\u5316\u4e3a-rgb"},"2.3 \u5c06 HSV \u8f6c\u5316\u4e3a RGB"),(0,i.kt)("p",null,"HSV \u8868\u8fbe\u5f69\u8272\u56fe\u50cf\u7684\u65b9\u5f0f\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Hue\uff08\u8272\u8c03\u3001\u8272\u76f8\uff09\u3002"),"Hue \u7528\u89d2\u5ea6\u5ea6\u91cf\uff0c\u53d6\u503c\u8303\u56f4\u4e3a0\uff5e360\xb0\uff0c\u8868\u793a\u8272\u5f69\u4fe1\u606f\uff0c\u5373\u6240\u5904\u7684\u5149\u8c31\u989c\u8272\u7684\u4f4d\u7f6e\u3002\u5982Hue=0 \u8868\u793a\u7ea2\u8272\uff0cHue=120 \u8868\u793a\u7eff\u8272\uff0cHue=240 \u8868\u793a\u84dd\u8272\u7b49\u7b49"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Saturation\uff08\u9971\u548c\u5ea6\u3001\u8272\u5f69\u7eaf\u51c0\u5ea6\uff09\u3002"),"\u9971\u548c\u5ea6\u8868\u793a\u989c\u8272\u63a5\u8fd1\u5149\u8c31\u8272\u7684\u7a0b\u5ea6\u3002\u9971\u548c\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u989c\u8272\u8d8a\u6df1\uff0c\u8d8a\u63a5\u8fd1\u5149\u8c31\u8272\u9971\u548c\u5ea6\u8d8a\u4f4e\uff0c\u8bf4\u660e\u989c\u8272\u8d8a\u6d45\uff0c\u8d8a\u63a5\u8fd1\u767d\u8272\u3002\u9971\u548c\u5ea6\u4e3a0\u8868\u793a\u7eaf\u767d\u8272\u3002\u53d6\u503c\u8303\u56f4\u4e3a0\uff5e100%\uff0c\u503c\u8d8a\u5927\uff0c\u989c\u8272\u8d8a\u9971\u548c\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Value\uff08\u660e\u5ea6\uff09\u3002")," \u660e\u5ea6\u51b3\u5b9a\u989c\u8272\u7a7a\u95f4\u4e2d\u989c\u8272\u7684\u660e\u6697\u7a0b\u5ea6\uff0c\u660e\u5ea6\u8d8a\u9ad8\uff0c\u8868\u793a\u989c\u8272\u8d8a\u660e\u4eae\uff0c\u8303\u56f4\u662f 0-100%\u3002\u660e\u5ea6\u4e3a0\u8868\u793a\u7eaf\u9ed1\u8272\uff08\u6b64\u65f6\u989c\u8272\u6700\u6697\uff09\u3002")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"HSV",src:t(7248).Z,width:"618",height:"465"})),(0,i.kt)("p",null,"HSV \u8f6c\u5316\u6210 RGB \u7684\u65b9\u6cd5\u5982\u4e0b\uff1a"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("a",{parentName:"mdxAdmonitionTitle",href:"https://en.wikipedia.org/wiki/HSL_and_HSV"},"\u53c2\u8003wiki")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{alt:"HSV_to_RGB",src:t(5727).Z,width:"1293",height:"452"}))),(0,i.kt)("p",null,"\u56e0\u4e3aHSV\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u76f4\u89c2\u3001\u65b9\u4fbf\uff0c\u6240\u4ee5\u4ee3\u7801\u903b\u8f91\u90e8\u5206\u901a\u5e38\u4f7f\u7528 HSV\u3002\u4f46WS2812B \u706f\u73e0\u7684\u9a71\u52a8\u4f7f\u7528\u7684\u662fRGB\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002"),(0,i.kt)("p",null,"\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/**\n * @brief \u5c06HSV\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\u4e3aRGB\u989c\u8272\u7a7a\u95f4\n * \n * @param  h HSV\u989c\u8272\u7a7a\u95f4\u7684H\uff1a\u8272\u8c03\u3002\u5355\u4f4d\xb0\uff0c\u8303\u56f40~360\u3002\uff08Hue \u8c03\u6574\u989c\u8272\uff0c0\xb0-\u7ea2\u8272\uff0c120\xb0-\u7eff\u8272\uff0c240\xb0-\u84dd\u8272\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\n * @param  s HSV\u989c\u8272\u7a7a\u95f4\u7684S\uff1a\u9971\u548c\u5ea6\u3002\u5355\u4f4d%\uff0c\u8303\u56f40~100\u3002\uff08Saturation \u9971\u548c\u5ea6\u9ad8\uff0c\u989c\u8272\u6df1\u800c\u8273\uff1b\u9971\u548c\u5ea6\u4f4e\uff0c\u989c\u8272\u6d45\u800c\u53d1\u767d\uff09\n * @param  v HSV\u989c\u8272\u7a7a\u95f4\u7684V\uff1a\u660e\u5ea6\u3002\u5355\u4f4d%\uff0c\u8303\u56f40~100\u3002\uff08Value \u63a7\u5236\u660e\u6697\uff0c\u660e\u5ea6\u8d8a\u9ad8\u4eae\u5ea6\u8d8a\u4eae\uff0c\u8d8a\u4f4e\u4eae\u5ea6\u8d8a\u4f4e\uff09\n * @param  rgb_buffer RGB\u503c\u7684\u6307\u9488\n *\n * Wiki: https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n */\nvoid ws2812_hsv2rgb(uint32_t h, uint32_t s, uint32_t v, ws2812_byte_buffer_t *rgb_buffer)\n{\n    h %= 360; // h -> [0,360]\n    uint32_t rgb_max = v * 2.55f;\n    uint32_t rgb_min = rgb_max * (100 - s) / 100.0f;\n\n    uint32_t i = h / 60;\n    uint32_t diff = h % 60;\n\n    // RGB adjustment amount by hue\n    uint32_t rgb_adj = (rgb_max - rgb_min) * diff / 60;\n\n    switch (i) {\n    case 0:\n        rgb_buffer->red = rgb_max;\n        rgb_buffer->green = rgb_min + rgb_adj;\n        rgb_buffer->blue = rgb_min;\n        break;\n    case 1:\n        rgb_buffer->red = rgb_max - rgb_adj;\n        rgb_buffer->green = rgb_max;\n        rgb_buffer->blue = rgb_min;\n        break;\n    case 2:\n        rgb_buffer->red = rgb_min;\n        rgb_buffer->green = rgb_max;\n        rgb_buffer->blue = rgb_min + rgb_adj;\n        break;\n    case 3:\n        rgb_buffer->red = rgb_min;\n        rgb_buffer->green = rgb_max - rgb_adj;\n        rgb_buffer->blue = rgb_max;\n        break;\n    case 4:\n        rgb_buffer->red = rgb_min + rgb_adj;\n        rgb_buffer->green = rgb_min;\n        rgb_buffer->blue = rgb_max;\n        break;\n    default:\n        rgb_buffer->red = rgb_max;\n        rgb_buffer->green = rgb_min;\n        rgb_buffer->blue = rgb_max - rgb_adj;\n        break;\n    }\n}\n")),(0,i.kt)("p",null,"\u4f7f\u7528HSV\uff0c\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u547c\u5438\u706f\u7684\u6548\u679c\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"breath_light",src:t(4406).Z,width:"634",height:"390"})),(0,i.kt)("h2",{id:"3-\u9ea6\u514b\u98ce\u91c7\u96c6\u97f3\u9891"},"3. \u9ea6\u514b\u98ce\u91c7\u96c6\u97f3\u9891"),(0,i.kt)("h3",{id:"31-opaadcdma-\u91c7\u96c6\u97f3\u9891"},"3.1 OPA+ADC+DMA \u91c7\u96c6\u97f3\u9891"),(0,i.kt)("p",null,"\u56e0\u4e3a CH32V003 \u5185\u90e8\u81ea\u5e26 OPA \u8fd0\u653e\uff0c\u6240\u4ee5\u5916\u56f4\u53ea\u9700\u63a5\u4e0a\u9ea6\u514b\u98ce\uff0c\u642d\u597d\u653e\u5927\u7535\u8def\uff0c\u5373\u53ef\u5f00\u542f ADC \u91c7\u96c6\u6570\u636e\u3002"),(0,i.kt)("p",null,"\u8003\u8651\u5230\u5e73\u5e38\u6211\u4eec\u542c\u5230\u7684\u97f3\u4e50\u9891\u7387\u4e00\u822c\u90fd\u4f4e\u4e8e5KHz\uff0c\u6240\u4ee5\u5c06 ADC \u7684\u91c7\u6837\u9891\u7387\u8bbe\u7f6e\u4e3a10KHz\u3002"),(0,i.kt)("p",null,"ADC \u901a\u8fc7\u5b9a\u65f6\u5668 TRGO \u4e8b\u4ef6\u89e6\u53d1\u91c7\u96c6\u3002"),(0,i.kt)("p",null,"\u542f\u7528 DMA \u642c\u8fd0 ADC \u91c7\u96c6\u7ed3\u679c\u3002"),(0,i.kt)("h3",{id:"32-fft-\u5206\u6790\u9891\u8c31"},"3.2 FFT \u5206\u6790\u9891\u8c31"),(0,i.kt)("p",null,"\u97f3\u4e50\u8c31\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u5f97\u5206\u6790\u51fa\u9891\u8c31\uff0c\u8fd9\u65f6\u5019\u5c31\u5f97\u9760 FFT \u4e86\uff0c\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u725b\u7684\u8d85\u7b80\u6d01 FFT \u7b97\u6cd5\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("code",null,"fix_fft.c")," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'/* fix_fft.c - Fixed-point in-place Fast Fourier Transform  */\n/*\n  All data are fixed-point short integers, in which -32768\n  to +32768 represent -1.0 to +1.0 respectively. Integer\n  arithmetic is used for speed, instead of the more natural\n  floating-point.\n  For the forward FFT (time -> freq), fixed scaling is\n  performed to prevent arithmetic overflow, and to map a 0dB\n  sine/cosine wave (i.e. amplitude = 32767) to two -6dB freq\n  coefficients. The return value is always 0.\n  For the inverse FFT (freq -> time), fixed scaling cannot be\n  done, as two 0dB coefficients would sum to a peak amplitude\n  of 64K, overflowing the 32k range of the fixed-point integers.\n  Thus, the fix_fft() routine performs variable scaling, and\n  returns a value which is the number of bits LEFT by which\n  the output must be shifted to get the actual amplitude\n  (i.e. if fix_fft() returns 3, each value of fr[] and fi[]\n  must be multiplied by 8 (2**3) for proper scaling.\n  Clearly, this cannot be done within fixed-point short\n  integers. In practice, if the result is to be used as a\n  filter, the scale_shift can usually be ignored, as the\n  result will be approximately correctly normalized as is.\n  Written by:  Tom Roberts  11/8/89\n  Made portable:  Malcolm Slaney 12/15/94 malcolm@interval.com\n  Enhanced:  Dimitrios P. Bouras  14 Jun 2006 dbouras@ieee.org\n*/\n#include "fix_fft.h"\n\n#define N_WAVE      1024    /* full length of Sinewave[] */\n#define LOG2_N_WAVE 10      /* log2(N_WAVE) */\n\n/*\n  Henceforth "short" implies 16-bit word. If this is not\n  the case in your architecture, please replace "short"\n  with a type definition which *is* a 16-bit word.\n*/\n\n/*\n  Since we only use 3/4 of N_WAVE, we define only\n  this many samples, in order to conserve data space.\n*/\nconst int16_t Sinewave[N_WAVE-N_WAVE/4] = {\n      0,    201,    402,    603,    804,   1005,   1206,   1406,\n   1607,   1808,   2009,   2209,   2410,   2610,   2811,   3011,\n   3211,   3411,   3611,   3811,   4011,   4210,   4409,   4608,\n   4807,   5006,   5205,   5403,   5601,   5799,   5997,   6195,\n   6392,   6589,   6786,   6982,   7179,   7375,   7571,   7766,\n   7961,   8156,   8351,   8545,   8739,   8932,   9126,   9319,\n   9511,   9703,   9895,  10087,  10278,  10469,  10659,  10849,\n  11038,  11227,  11416,  11604,  11792,  11980,  12166,  12353,\n  12539,  12724,  12909,  13094,  13278,  13462,  13645,  13827,\n  14009,  14191,  14372,  14552,  14732,  14911,  15090,  15268,\n  15446,  15623,  15799,  15975,  16150,  16325,  16499,  16672,\n  16845,  17017,  17189,  17360,  17530,  17699,  17868,  18036,\n  18204,  18371,  18537,  18702,  18867,  19031,  19194,  19357,\n  19519,  19680,  19840,  20000,  20159,  20317,  20474,  20631,\n  20787,  20942,  21096,  21249,  21402,  21554,  21705,  21855,\n  22004,  22153,  22301,  22448,  22594,  22739,  22883,  23027,\n  23169,  23311,  23452,  23592,  23731,  23869,  24006,  24143,\n  24278,  24413,  24546,  24679,  24811,  24942,  25072,  25201,\n  25329,  25456,  25582,  25707,  25831,  25954,  26077,  26198,\n  26318,  26437,  26556,  26673,  26789,  26905,  27019,  27132,\n  27244,  27355,  27466,  27575,  27683,  27790,  27896,  28001,\n  28105,  28208,  28309,  28410,  28510,  28608,  28706,  28802,\n  28897,  28992,  29085,  29177,  29268,  29358,  29446,  29534,\n  29621,  29706,  29790,  29873,  29955,  30036,  30116,  30195,\n  30272,  30349,  30424,  30498,  30571,  30643,  30713,  30783,\n  30851,  30918,  30984,  31049,  31113,  31175,  31236,  31297,\n  31356,  31413,  31470,  31525,  31580,  31633,  31684,  31735,\n  31785,  31833,  31880,  31926,  31970,  32014,  32056,  32097,\n  32137,  32176,  32213,  32249,  32284,  32318,  32350,  32382,\n  32412,  32441,  32468,  32495,  32520,  32544,  32567,  32588,\n  32609,  32628,  32646,  32662,  32678,  32692,  32705,  32717,\n  32727,  32736,  32744,  32751,  32757,  32761,  32764,  32766,\n  32767,  32766,  32764,  32761,  32757,  32751,  32744,  32736,\n  32727,  32717,  32705,  32692,  32678,  32662,  32646,  32628,\n  32609,  32588,  32567,  32544,  32520,  32495,  32468,  32441,\n  32412,  32382,  32350,  32318,  32284,  32249,  32213,  32176,\n  32137,  32097,  32056,  32014,  31970,  31926,  31880,  31833,\n  31785,  31735,  31684,  31633,  31580,  31525,  31470,  31413,\n  31356,  31297,  31236,  31175,  31113,  31049,  30984,  30918,\n  30851,  30783,  30713,  30643,  30571,  30498,  30424,  30349,\n  30272,  30195,  30116,  30036,  29955,  29873,  29790,  29706,\n  29621,  29534,  29446,  29358,  29268,  29177,  29085,  28992,\n  28897,  28802,  28706,  28608,  28510,  28410,  28309,  28208,\n  28105,  28001,  27896,  27790,  27683,  27575,  27466,  27355,\n  27244,  27132,  27019,  26905,  26789,  26673,  26556,  26437,\n  26318,  26198,  26077,  25954,  25831,  25707,  25582,  25456,\n  25329,  25201,  25072,  24942,  24811,  24679,  24546,  24413,\n  24278,  24143,  24006,  23869,  23731,  23592,  23452,  23311,\n  23169,  23027,  22883,  22739,  22594,  22448,  22301,  22153,\n  22004,  21855,  21705,  21554,  21402,  21249,  21096,  20942,\n  20787,  20631,  20474,  20317,  20159,  20000,  19840,  19680,\n  19519,  19357,  19194,  19031,  18867,  18702,  18537,  18371,\n  18204,  18036,  17868,  17699,  17530,  17360,  17189,  17017,\n  16845,  16672,  16499,  16325,  16150,  15975,  15799,  15623,\n  15446,  15268,  15090,  14911,  14732,  14552,  14372,  14191,\n  14009,  13827,  13645,  13462,  13278,  13094,  12909,  12724,\n  12539,  12353,  12166,  11980,  11792,  11604,  11416,  11227,\n  11038,  10849,  10659,  10469,  10278,  10087,   9895,   9703,\n   9511,   9319,   9126,   8932,   8739,   8545,   8351,   8156,\n   7961,   7766,   7571,   7375,   7179,   6982,   6786,   6589,\n   6392,   6195,   5997,   5799,   5601,   5403,   5205,   5006,\n   4807,   4608,   4409,   4210,   4011,   3811,   3611,   3411,\n   3211,   3011,   2811,   2610,   2410,   2209,   2009,   1808,\n   1607,   1406,   1206,   1005,    804,    603,    402,    201,\n      0,   -201,   -402,   -603,   -804,  -1005,  -1206,  -1406,\n  -1607,  -1808,  -2009,  -2209,  -2410,  -2610,  -2811,  -3011,\n  -3211,  -3411,  -3611,  -3811,  -4011,  -4210,  -4409,  -4608,\n  -4807,  -5006,  -5205,  -5403,  -5601,  -5799,  -5997,  -6195,\n  -6392,  -6589,  -6786,  -6982,  -7179,  -7375,  -7571,  -7766,\n  -7961,  -8156,  -8351,  -8545,  -8739,  -8932,  -9126,  -9319,\n  -9511,  -9703,  -9895, -10087, -10278, -10469, -10659, -10849,\n -11038, -11227, -11416, -11604, -11792, -11980, -12166, -12353,\n -12539, -12724, -12909, -13094, -13278, -13462, -13645, -13827,\n -14009, -14191, -14372, -14552, -14732, -14911, -15090, -15268,\n -15446, -15623, -15799, -15975, -16150, -16325, -16499, -16672,\n -16845, -17017, -17189, -17360, -17530, -17699, -17868, -18036,\n -18204, -18371, -18537, -18702, -18867, -19031, -19194, -19357,\n -19519, -19680, -19840, -20000, -20159, -20317, -20474, -20631,\n -20787, -20942, -21096, -21249, -21402, -21554, -21705, -21855,\n -22004, -22153, -22301, -22448, -22594, -22739, -22883, -23027,\n -23169, -23311, -23452, -23592, -23731, -23869, -24006, -24143,\n -24278, -24413, -24546, -24679, -24811, -24942, -25072, -25201,\n -25329, -25456, -25582, -25707, -25831, -25954, -26077, -26198,\n -26318, -26437, -26556, -26673, -26789, -26905, -27019, -27132,\n -27244, -27355, -27466, -27575, -27683, -27790, -27896, -28001,\n -28105, -28208, -28309, -28410, -28510, -28608, -28706, -28802,\n -28897, -28992, -29085, -29177, -29268, -29358, -29446, -29534,\n -29621, -29706, -29790, -29873, -29955, -30036, -30116, -30195,\n -30272, -30349, -30424, -30498, -30571, -30643, -30713, -30783,\n -30851, -30918, -30984, -31049, -31113, -31175, -31236, -31297,\n -31356, -31413, -31470, -31525, -31580, -31633, -31684, -31735,\n -31785, -31833, -31880, -31926, -31970, -32014, -32056, -32097,\n -32137, -32176, -32213, -32249, -32284, -32318, -32350, -32382,\n -32412, -32441, -32468, -32495, -32520, -32544, -32567, -32588,\n -32609, -32628, -32646, -32662, -32678, -32692, -32705, -32717,\n -32727, -32736, -32744, -32751, -32757, -32761, -32764, -32766,\n};\n\n/*\n  FIX_MPY() - fixed-point multiplication & scaling.\n  Substitute inline assembly for hardware-specific\n  optimization suited to a particluar DSP processor.\n  Scaling ensures that result remains 16-bit.\n*/\nint16_t FIX_MPY(int16_t a, int16_t b)\n{\n    /* shift right one less bit (i.e. 15-1) */\n    int c = ((int)a * (int)b) >> 14;\n    /* last bit shifted out = rounding-bit */\n    b = c & 0x01;\n    /* last shift + rounding bit */\n    a = (c >> 1) + b;\n    return a;\n}\n\n/*\n  fix_fft() - perform forward/inverse fast Fourier transform.\n  fr[n],fi[n] are real and imaginary arrays, both INPUT AND\n  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to\n  0 for forward transform (FFT), or 1 for iFFT.\n*/\nint fix_fft(int16_t fr[], int16_t fi[], int16_t m, int16_t inverse)\n{\n    int16_t mr, nn, i, j, l, k, istep, n, scale, shift;\n    int16_t qr, qi, tr, ti, wr, wi;\n\n    n = 1 << m;\n\n    /* max FFT size = N_WAVE */\n    if (n > N_WAVE)\n        return -1;\n\n    mr = 0;\n    nn = n - 1;\n    scale = 0;\n\n    /* decimation in time - re-order data */\n    for (m=1; m<=nn; ++m) {\n        l = n;\n        do {\n            l >>= 1;\n        } while (mr+l > nn);\n        mr = (mr & (l-1)) + l;\n\n        if (mr <= m)\n            continue;\n        tr = fr[m];\n        fr[m] = fr[mr];\n        fr[mr] = tr;\n        ti = fi[m];\n        fi[m] = fi[mr];\n        fi[mr] = ti;\n    }\n\n    l = 1;\n    k = LOG2_N_WAVE-1;\n    while (l < n) {\n        if (inverse) {\n            /* variable scaling, depending upon data */\n            shift = 0;\n            for (i=0; i<n; ++i) {\n                j = fr[i];\n                if (j < 0)\n                    j = -j;\n                m = fi[i];\n                if (m < 0)\n                    m = -m;\n                if (j > 16383 || m > 16383) {\n                    shift = 1;\n                    break;\n                }\n            }\n            if (shift)\n                ++scale;\n        } else {\n            /*\n              fixed scaling, for proper normalization --\n              there will be log2(n) passes, so this results\n              in an overall factor of 1/n, distributed to\n              maximize arithmetic accuracy.\n            */\n            shift = 1;\n        }\n        /*\n          it may not be obvious, but the shift will be\n          performed on each data point exactly once,\n          during this pass.\n        */\n        istep = l << 1;\n        for (m=0; m<l; ++m) {\n            j = m << k;\n            /* 0 <= j < N_WAVE/2 */\n            wr =  Sinewave[j+N_WAVE/4];\n            wi = -Sinewave[j];\n            if (inverse)\n                wi = -wi;\n            if (shift) {\n                wr >>= 1;\n                wi >>= 1;\n            }\n            for (i=m; i<n; i+=istep) {\n                j = i + l;\n                tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);\n                ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);\n                qr = fr[i];\n                qi = fi[i];\n                if (shift) {\n                    qr >>= 1;\n                    qi >>= 1;\n                }\n                fr[j] = qr - tr;\n                fi[j] = qi - ti;\n                fr[i] = qr + tr;\n                fi[i] = qi + ti;\n            }\n        }\n        --k;\n        l = istep;\n    }\n    return scale;\n}\n\n/*\n  fix_fftr() - forward/inverse FFT on array of real numbers.\n  Real FFT/iFFT using half-size complex FFT by distributing\n  even/odd samples into real/imaginary arrays respectively.\n  In order to save data space (i.e. to avoid two arrays, one\n  for real, one for imaginary samples), we proceed in the\n  following two steps: a) samples are rearranged in the real\n  array so that all even samples are in places 0-(N/2-1) and\n  all imaginary samples in places (N/2)-(N-1), and b) fix_fft\n  is called with fr and fi pointing to index 0 and index N/2\n  respectively in the original array. The above guarantees\n  that fix_fft "sees" consecutive real samples as alternating\n  real and imaginary samples in the complex array.\n*/\nint fix_fftr(int16_t f[], int m, int inverse)\n{\n    int i, N = 1<<(m-1), scale = 0;\n    int16_t tt, *fr=f, *fi=&f[N];\n\n    if (inverse)\n        scale = fix_fft(fi, fr, m-1, inverse);\n    for (i=1; i<N; i+=2) {\n        tt = f[N+i-1];\n        f[N+i-1] = f[i];\n        f[i] = tt;\n    }\n    if (! inverse)\n        scale = fix_fft(fi, fr, m-1, inverse);\n    return scale;\n}\n'))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"int fix_fft(short fr[], short fi[], short m, short inverse)")," \u662f FFT \u7b97\u6cd5\u7684\u8ba1\u7b97\u51fd\u6570\uff0cfr[] \u662f ADC \u91c7\u96c6\u5230\u4fe1\u53f7\u503c\u7684\u5b9e\u90e8\uff0cfi[] \u662f ADC \u91c7\u96c6\u5230\u4fe1\u53f7\u503c\u7684\u865a\u90e8\u3002\u7ecf\u8fc7 ",(0,i.kt)("inlineCode",{parentName:"p"},"fix_fft")," \u51fd\u6570\u5904\u7406\u4e4b\u540e\uff0cfr[] \u662f FFT \u8ba1\u7b97\u6240\u5f97\u7684\u5b9e\u90e8\uff0cfi[] \u662f\u8ba1\u7b97\u6240\u5f97\u7684\u865a\u90e8\u3002"),(0,i.kt)("h2",{id:"4-\u6548\u679c\u6f14\u793a"},"4. \u6548\u679c\u6f14\u793a"),(0,i.kt)("admonition",{title:"\u5f00\u6e90",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u9879\u76ee\u5f00\u6e90\u5730\u5740\uff1a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Taoyukai/ch32v003_ws2812_music"},"https://github.com/Taoyukai/ch32v003_ws2812_music"))))}c.isMDXComponent=!0},163:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/CH32V003_resource-a92c54f61c321b8484d280db4822cc47.png"},7248:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/HSV-2789e5e567a74b242b078c202c127dd8.png"},5727:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/HSV_to_RGB-903c7654bea3ffcf398accecc574dca5.png"},4406:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/breath_light-3a6712f31edfb0f881cc195a159df255.gif"},8401:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ch32v003_ws2812_pcb-bcd7207c6d07befbb00b7b641d4f38b7.png"},6030:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ch32v003_ws2812_sch-63ddb73d39a6da4f11443305c9caa3a8.svg"},9348:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ws2812_cascade_method-acf6228a47fb8fb0160140fd614a6af8.png"},1351:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ws2812_data_transfer_time-35bb614f7c1f5f3039862a4b3b69d1fc.png"},8820:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ws2812_data_transmission_method-2200a8a9365bf7799e353768368fad58.png"},1093:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ws2812_sequence_chart-fd91e14b0173462165b63a1e8e336a11.png"},6739:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/ws2812_spi_clk-4f1993ba777f917761396c18fbc64109.png"}}]);