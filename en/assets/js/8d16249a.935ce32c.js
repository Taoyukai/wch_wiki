"use strict";(self.webpackChunkwch_wiki=self.webpackChunkwch_wiki||[]).push([[1518],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>S});var C=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var C=Object.getOwnPropertySymbols(e);n&&(C=C.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,C)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,C,r=function(e,n){if(null==e)return{};var t,C,r={},i=Object.keys(e);for(C=0;C<i.length;C++)t=i[C],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(C=0;C<i.length;C++)t=i[C],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=C.createContext({}),L=function(e){var n=C.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=L(e.components);return C.createElement(l.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return C.createElement(C.Fragment,{},n)}},u=C.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=L(t),S=r,s=u["".concat(l,".").concat(S)]||u[S]||_[S]||i;return t?C.createElement(s,a(a({ref:n},c),{},{components:t})):C.createElement(s,a({ref:n},c))}));function S(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var L=2;L<i;L++)a[L]=t[L];return C.createElement.apply(null,a)}return C.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1157:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>_,frontMatter:()=>i,metadata:()=>o,toc:()=>L});var C=t(7462),r=(t(7294),t(3905));const i={sidebar_position:3,description:"\u4f7f\u7528HSE\u548cHSI\uff0c\u914d\u7f6eCH23V307\u7cfb\u7edf\u65f6\u949f"},a="\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e",o={unversionedId:"MCU+/CH32V307/Reference Manual/\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e",id:"MCU+/CH32V307/Reference Manual/\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e",title:"\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e",description:"\u4f7f\u7528HSE\u548cHSI\uff0c\u914d\u7f6eCH23V307\u7cfb\u7edf\u65f6\u949f",source:"@site/docs/MCU+/CH32V307/Reference Manual/03_\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e.md",sourceDirName:"MCU+/CH32V307/Reference Manual/03_\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236",slug:"/MCU+/CH32V307/Reference Manual/\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e",permalink:"/en/docs/MCU+/CH32V307/Reference Manual/\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"\u4f7f\u7528HSE\u548cHSI\uff0c\u914d\u7f6eCH23V307\u7cfb\u7edf\u65f6\u949f"},sidebar:"MCU",previous:{title:"\u7cfb\u7edf\u65f6\u949f\u7ed3\u6784",permalink:"/en/docs/MCU+/CH32V307/Reference Manual/\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u7cfb\u7edf\u65f6\u949f\u7ed3\u6784"},next:{title:"\u65f6\u949f\u5b89\u5168\u7cfb\u7edfCSS",permalink:"/en/docs/MCU+/CH32V307/Reference Manual/\u590d\u4f4d\u3001\u6269\u5c55\u548c\u65f6\u949f\u63a7\u5236/\u65f6\u949f\u5b89\u5168\u7cfb\u7edf"}},l={},L=[{value:"1.SystemInit \u51fd\u6570",id:"1systeminit-\u51fd\u6570",level:2},{value:"2. \u53c2\u8003\u4ee3\u7801",id:"2-\u53c2\u8003\u4ee3\u7801",level:2}],c={toc:L};function _(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,C.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e"},"\u7cfb\u7edf\u65f6\u949f\u914d\u7f6e"),(0,r.kt)("h2",{id:"1systeminit-\u51fd\u6570"},"1.SystemInit \u51fd\u6570"),(0,r.kt)("p",null,"\u6574\u4e2a\u7cfb\u7edf\u7684\u65f6\u949f\u7531\u542f\u52a8\u6587\u4ef6\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemInit")," \u51fd\u6570\u914d\u7f6e\u5b8c\u6210\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void SystemInit(void)\n{\n    /* RCC_DeInit */\n    \n    /* reset the RCC clock configuration to the default reset state(for debug purpose) */\n    /* Set HSION bit */\n    RCC->CTLR |= (uint32_t)0x00000001;\n\n    /* reset SW, SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */\n    RCC->CFGR0 &= (uint32_t)0xF8FF0000;\n\n    /* reset HSEON, CSSON and PLLON bits */\n    RCC->CTLR &= (uint32_t)0xFEF6FFFF;\n    \n    /* reset BSEBYP bit */\n    RCC->CTLR &= (uint32_t)0xFFFBFFFF;\n    \n    /* reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */\n    RCC->CFGR0 &= (uint32_t)0xFF80FFFF;\n    \n    /* reset PLL2ON and PLL3ON bits */\n    RCC->CTLR &= (uint32_t)0xEBFFFFFF;\n    \n    /* disable all rcc interrupts and clear pendind bits */\n    RCC->INTR = 0x00FF0000;\n    \n    /* reset RCC_CFGR2 */\n    RCC->CFGR2 = 0x00000000;\n\n    /* configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */\n    SetSysClock(); \n}\n")),(0,r.kt)("p",null,"\u524d\u9762\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"RCC_DeInit"),"\uff0c\u7136\u540e\u8fdb\u5165 ",(0,r.kt)("inlineCode",{parentName:"p"},"SetSysClock"),"\uff0c\u8bbe\u7f6e PLL\uff0cSYSCLK\uff0cHCLK\uff0cPCLK\u7b49\u65f6\u949f\u3002"),(0,r.kt)("p",null,"SetSysClock\u7684\u4e3b\u8981\u6b65\u9aa4\u4e3a\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5f00\u542f HSE \u6216 HSI\uff0c\u5e76\u7b49\u5f85\u5176\u7a33\u5b9a"),(0,r.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e AHB\uff0cAPB2\uff0c APB1 \u7684\u9884\u5206\u9891\u56e0\u5b50"),(0,r.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e PLL \u7684\u65f6\u949f\u6765\u6e90\u548c\u500d\u9891\u56e0\u5b50"),(0,r.kt)("li",{parentName:"ul"},"\u5f00\u542f PLL\uff0c\u5e76\u7b49\u5f85\u5176\u7a33\u5b9a"),(0,r.kt)("li",{parentName:"ul"},"\u9009\u62e9 SYSCLK \u65f6\u949f\u4e3a PLLCLK"),(0,r.kt)("li",{parentName:"ul"},"\u8bfb\u53d6 SYSCLK \u5207\u6362\u72b6\u6001\u4f4d\uff0c\u786e\u4fdd PLLCLK \u4e3a SYSCLK \u65f6\u949f")),(0,r.kt)("h2",{id:"2-\u53c2\u8003\u4ee3\u7801"},"2. \u53c2\u8003\u4ee3\u7801"),(0,r.kt)("p",null,"\u76f4\u63a5\u5c06\u542f\u52a8\u6587\u4ef6\u4e2d\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"jal  SystemInit")," \u66ff\u6362\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"jal  HSE_set_system_clock")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"p"},"jal  HSI_set_system_clock")," \u6d4b\u8bd5 "),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("code",null,"\u53c2\u8003\u4ee3\u7801 - \u4f7f\u7528HSE \u548c HSI\u914d\u7f6e\u7cfb\u7edf\u65f6\u949f")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include "debug.h"\n\nvoid HSE_set_system_clock(void)\n{\n    RCC_DeInit();\n\n    /* enable HSE */\n    RCC_HSEConfig(RCC_HSE_ON);\n    while (RCC_WaitForHSEStartUp() != SUCCESS);\n\n\n    RCC_HCLKConfig(RCC_SYSCLK_Div1); /* HCLK = SYSCLK */\n    RCC_PCLK2Config(RCC_HCLK_Div1);  /* PCLK2 = HCLK */\n    RCC_PCLK1Config(RCC_HCLK_Div2);  /* PCLK1 = HCLK/2 */\n    \n\n    /* PLLCLK = HSE_VALUE (8MHz) * 18 = 144MHz */\n    RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMULL18_EXTEN); \n\n    RCC_PLLCmd(ENABLE);\n    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);\n\n    /* SYSCLK = PLLCLK */\n    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);\n    while(RCC_GetSYSCLKSource() != 0x08);  \n}\n\nvoid HSI_set_systeIm_clock(void)\n{\n    RCC_DeInit();\n\n    /* HSI -> PLL */\n    EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;\n\n    /* HSI/2 -> PLL */\n    // EXTEN->EXTEN_CTR &= ~EXTEN_PLL_HSI_PRE;\n\n    /* enable HSI */\n    RCC_HSICmd(ENABLE);\n    while ( RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET );\n\n\n    RCC_HCLKConfig(RCC_SYSCLK_Div1); /* HCLK = SYSCLK */\n    RCC_PCLK2Config(RCC_HCLK_Div1);  /* PCLK2 = HCLK */\n    RCC_PCLK1Config(RCC_HCLK_Div2);  /* PCLK1 = HCLK/2 */\n    \n\n    /* PLLCLK = HSI (8MHz) * 18 = 144MHz */\n    RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMULL18_EXTEN); \n\n    RCC_PLLCmd(ENABLE);\n    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);\n\n    /* SYSCLK = PLLCLK */\n    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);\n    while(RCC_GetSYSCLKSource() != 0x08);  \n}\n\n\nint main(void)\n{\n    Delay_Init();\n    USART_Printf_Init(256000);\n\n    printf("ch32v307 HSE MCO test\\r\\n");\n\n    /* init out pin PA8 */\n    GPIO_InitTypeDef GPIO_InitStructure = {0};\n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);\n\n    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;\n    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;\n    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n    GPIO_Init(GPIOA, &GPIO_InitStructure);\n    \n\n    /* config and enable PLL2/PLL3 */\n    RCC_PREDIV2Config(RCC_PREDIV2_Div1);\n    RCC_PLL2Config(RCC_PLL2Mul_2_5 );\n    RCC_PLL2Cmd(ENABLE);\n\n    RCC_PLL3Config(RCC_PLL3Mul_8);\n    RCC_PLL3Cmd(ENABLE);\n\n    /* Selects the clock source to output on MCO pin  */\n    RCC_MCOConfig(RCC_MCO_SYSCLK);\n\n    while(1)\n    {\n        ;\n    }\n}\n'))))}_.isMDXComponent=!0}}]);